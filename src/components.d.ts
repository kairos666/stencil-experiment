/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }

  interface HTMLAttributes {}
}


import {
  ExperimentalButton as ExperimentalButton
} from './components/experimental-button/experimental-button';

declare global {
  interface HTMLExperimentalButtonElement extends ExperimentalButton, HTMLStencilElement {
  }
  var HTMLExperimentalButtonElement: {
    prototype: HTMLExperimentalButtonElement;
    new (): HTMLExperimentalButtonElement;
  };
  interface HTMLElementTagNameMap {
    "experimental-button": HTMLExperimentalButtonElement;
  }
  interface ElementTagNameMap {
    "experimental-button": HTMLExperimentalButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "experimental-button": JSXElements.ExperimentalButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface ExperimentalButtonAttributes extends HTMLAttributes {
      colored?: boolean;
      disabled?: boolean;
      type?: string;
    }
  }
}


import {
  ExperimentalCard as ExperimentalCard
} from './components/experimental-card/experimental-card';

declare global {
  interface HTMLExperimentalCardElement extends ExperimentalCard, HTMLStencilElement {
  }
  var HTMLExperimentalCardElement: {
    prototype: HTMLExperimentalCardElement;
    new (): HTMLExperimentalCardElement;
  };
  interface HTMLElementTagNameMap {
    "experimental-card": HTMLExperimentalCardElement;
  }
  interface ElementTagNameMap {
    "experimental-card": HTMLExperimentalCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "experimental-card": JSXElements.ExperimentalCardAttributes;
    }
  }
  namespace JSXElements {
    export interface ExperimentalCardAttributes extends HTMLAttributes {
      illustration?: string;
      supportingText?: string;
      title?: string;
    }
  }
}


import {
  ExperimentalVerticalSlideshow as ExpVerticalSlideshow
} from './components/experimental-vertical-slideshow/experimental-vertical-slideshow';

declare global {
  interface HTMLExpVerticalSlideshowElement extends ExpVerticalSlideshow, HTMLStencilElement {
  }
  var HTMLExpVerticalSlideshowElement: {
    prototype: HTMLExpVerticalSlideshowElement;
    new (): HTMLExpVerticalSlideshowElement;
  };
  interface HTMLElementTagNameMap {
    "exp-vertical-slideshow": HTMLExpVerticalSlideshowElement;
  }
  interface ElementTagNameMap {
    "exp-vertical-slideshow": HTMLExpVerticalSlideshowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "exp-vertical-slideshow": JSXElements.ExpVerticalSlideshowAttributes;
    }
  }
  namespace JSXElements {
    export interface ExpVerticalSlideshowAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  MyComponent as MyComponent
} from './components/my-component/my-component';

declare global {
  interface HTMLMyComponentElement extends MyComponent, HTMLStencilElement {
  }
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    "my-component": HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
    "my-component": HTMLMyComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "my-component": JSXElements.MyComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyComponentAttributes extends HTMLAttributes {
      first?: string;
      last?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
